generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  User                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Answer {
  id         String    @id
  title      String
  correct    Boolean
  questionId String?
  Question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId], map: "Answer_questionId_fkey")
}

model Certificate {
  id        String   @id
  createdAt DateTime @default(now())
  userId    String
  courseId  String
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "Certificate_courseId_fkey")
  @@index([userId], map: "Certificate_userId_fkey")
}

model Course {
  id           String        @id
  title        String
  description  String
  neededPoints Int
  Certificate  Certificate[]
  Enrollment   Enrollment[]
  Material     Material[]
  Quiz         Quiz[]
}

model Enrollment {
  id          String    @id
  startedAt   DateTime  @default(now())
  userId      String
  courseId    String
  completedAt DateTime?
  Course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "Enrollment_courseId_fkey")
  @@index([userId], map: "Enrollment_userId_fkey")
}

model Info {
  id          String   @id
  title       String
  description String
  body        String?  @db.Text
  readTime    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Material {
  id       String  @id
  title    String
  type     String
  url      String?
  body     String?
  courseId String?
  Course   Course? @relation(fields: [courseId], references: [id])

  @@index([courseId], map: "Material_courseId_fkey")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  createdById String
  User        User     @relation(fields: [createdById], references: [id])

  @@index([createdById], map: "Post_createdById_fkey")
  @@index([name])
}

model Question {
  id            String   @id
  title         String
  points        Int
  quizId        String?
  correctAnswer String
  Answer        Answer[]
  Quiz          Quiz?    @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId], map: "Question_quizId_fkey")
}

model Quiz {
  id       String     @id
  title    String
  points   Int
  courseId String?
  Question Question[]
  Course   Course?    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "Quiz_courseId_fkey")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String        @id
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  name          String?
  consent       Boolean?
  admin         Boolean       @default(false)
  chef          Boolean       @default(false)
  Account       Account[]
  Certificate   Certificate[]
  Enrollment    Enrollment[]
  Post          Post[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
